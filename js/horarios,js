// Utilidades
const daysOfWeek = ["Lunes","Martes","Miercoles","Jueves","Viernes","Sabado","Domingo"]; // sin tildes para seguir el C++
const CELL_WIDTH_CH = 16; // ancho aproximado


const byId = id => document.getElementById(id);
const trim = s => (s ?? "").trim();


function parseHm(s) {
const m = /^\s*(\d{1,2})\s*:\s*(\d{2})\s*$/.exec(s);
if (!m) throw new Error("Formato de hora inválido: " + s);
const h = parseInt(m[1],10), min = parseInt(m[2],10);
if (h<0||h>23||min<0||min>59) throw new Error("Hora fuera de rango: "+s);
return h*60+min;
}


function parseRange(s) {
const parts = s.split("-");
if (parts.length !== 2) throw new Error("Formato de rango debe ser 'HH:MM - HH:MM'");
const start = parseHm(parts[0]);
const end = parseHm(parts[1]);
if (end <= start) throw new Error("La hora de fin debe ser después de la de inicio");
return {start, end};
}


// Evaluador de expresiones entero (+,-,*,/) estilo C++
function evalExpr(expr) {
const s = trim(expr);
if (!/^[-+*/()\d\s]+$/.test(s)) throw new Error("Expresión inválida: solo 0-9 y + - * / ( )");
// Shunting-yard
const output = [], ops = [];
const prec = c => (c==="+"||c==="-")?1:(c==="*"||c==="/")?2:0;
const tokens = s.match(/\d+|[()+\-*/]/g) || [];
for (const t of tokens) {
if (/^\d+$/.test(t)) output.push(parseInt(t,10));
else if (t === "(") ops.push(t);
else if (t === ")") {
while (ops.length && ops[ops.length-1] !== "(") applyOp();
}
